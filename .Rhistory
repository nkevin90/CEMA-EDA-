library(sf)
library(foreign)
library(leaflet)
data <- read_csv("data/cema_internship_task_2023.csv")
head(data)
data <- read_csv("data/cema_internship_task_2023.csv")
print(dim(data))
head(data)
data <- read_csv("data/cema_internship_task_2023.csv")
print(dim(data))
data <- read_csv("data/cema_internship_task_2023.csv")
head(data)
data <- read_csv("data/cema_internship_task_2023.csv")
head(data)
print(dim(data))
data <- read_csv("data/cema_internship_task_2023.csv")
head(data)
data <- read_csv("data/cema_internship_task_2023.csv")
dim(data)
data <- read_csv("data/cema_internship_task_2023.csv")
dim(data)
data <- read_csv("data/cema_internship_task_2023.csv")
# Viewing the top 5 dataset values
head(data)
# Checking the percentage of missing values(NA)
missing_percentage <- colMeans(is.na(data)) * 100
print(missing_percentage)
# Checking the percentage of missing values(NA)
missing_percentage <- colMeans(is.na(data)) * 100
print(paste0("Percentage of missing values for each column: ", missing_percentage, "%"))
# Checking the percentage of missing values(NA)
missing_percentage <- colMeans(is.na(data)) * 100
print(missing_percentage)
summarise(data)
summary(data)
# Checking the percentage of missing values(NA)
calculate_missing_percentage <- function(data) {
missing_percentage <- colMeans(is.na(data)) * 100
return(missing_percentage)
}
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# Replacing all NA's with 0
data <- data %>%
mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# removing county from county name entries
data$county <- gsub(" County", "", data$county)
# Convert the period date to a 28 day full date format
data$full_date <- dmy(paste0("28-", data$period))
# Display the updated data with the new "full_date" column
view(data)
data <- read_csv("data/cema_internship_task_2023.csv")
# Viewing the top 5 dataset values
head(data)
data <- read_csv("data/cema_internship_task_2023.csv")
# Viewing the top 5 dataset values
head(data)
cat("\014")
line_data <- line_data %>%
mutate(period = str_c(period, "-01")) %>%
separate(period, into = c("month", "year", "day"), sep = "-", remove = FALSE) %>%
mutate(month_number = as.character(match(month, month.abb)),
year = str_replace(year, "^", "20")) %>%
mutate(date = make_date(year, month_number, day)) %>%
select(date, total_dewormed, diarrhea_cases) %>%
arrange(date)
line_data <- data %>%
group_by(period) %>%
summarise(
total_dewormed = sum(`Total Dewormed`, na.rm = TRUE),
diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE))
line_data <- line_data %>%
mutate(period = str_c(period, "-01")) %>%
separate(period, into = c("month", "year", "day"), sep = "-", remove = FALSE) %>%
mutate(month_number = as.character(match(month, month.abb)),
year = str_replace(year, "^", "20")) %>%
mutate(date = make_date(year, month_number, day)) %>%
select(date, total_dewormed, diarrhea_cases) %>%
arrange(date)
line_data %>% head()
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = total_dewormed), linewidth = 1.5, show.legend = FALSE, color="blue") +
labs(title = "Total Dewormed Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = diarrhea_cases, color = "Diarrhea Cases"), linewidth = 1.5 ,color="red") +
labs(title = "Diarrhea Cases Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Read the .dbf file
dbf_data <- read.dbf("shapefiles/County.dbf")
# View the data
head(dbf_data)
shp <- st_read("shapefiles/County.shp")
# View the data
head(shp)
# Plot the shapefile
plot(shp)
shp <- readOGR(dsn = "path/to/shapefiles", layer = "county")
view(merged_data)
knitr::opts_chunk$set(echo = TRUE)
# Importing required libraries
library(tidyverse)
library(lubridate)
library(dplyr)
library(rgdal)
library(ggplot2)
library(sf)
library(foreign)
library(leaflet)
data <- read_csv("data/cema_internship_task_2023.csv")
# Viewing the top 5 dataset values
head(data)
# Checking for missing values and other descriptive statistics
summary(data)
# Checking the percentage of missing values(NA)
calculate_missing_percentage <- function(data) {
missing_percentage <- colMeans(is.na(data)) * 100
return(missing_percentage)
}
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# Replacing all NA's with 0
data <- data %>%
mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
# checking if the NA's have been replaced with 0
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# removing county from county name entries
data$county <- gsub(" County", "", data$county)
# Convert the period date to a 28 day full date format
data$full_date <- dmy(paste0("28-", data$period))
# Display the updated data with the new "full_date" column
view(data)
line_data <- data %>%
group_by(period) %>%
summarise(
total_dewormed = sum(`Total Dewormed`, na.rm = TRUE),
diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE))
line_data <- line_data %>%
mutate(period = str_c(period, "-01")) %>%
separate(period, into = c("month", "year", "day"), sep = "-", remove = FALSE) %>%
mutate(month_number = as.character(match(month, month.abb)),
year = str_replace(year, "^", "20")) %>%
mutate(date = make_date(year, month_number, day)) %>%
select(date, total_dewormed, diarrhea_cases) %>%
arrange(date)
line_data %>% head()
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = total_dewormed), linewidth = 1.5, show.legend = FALSE, color="blue") +
labs(title = "Total Dewormed Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = diarrhea_cases, color = "Diarrhea Cases"), linewidth = 1.5 ,color="red") +
labs(title = "Diarrhea Cases Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Read the .dbf file
dbf_data <- read.dbf("shapefiles/County.dbf")
# View the data
head(dbf_data)
shp <- st_read("shapefiles/County.shp")
# View the data
head(shp)
# Plot the shapefile
plot(shp)
merged_data <- left_join(shp, data, by = c("Name" = "county"))
view(merged_data)
shp <- readOGR(dsn = "path/to/shapefiles", layer = "county")
filtered_data <- data %>%
filter(year(full_date) %in% c(2021, 2022, 2023))
# Group data by county and year, and calculate the total number of diarrhea cases
diarrhea_counts <- filtered_data %>%
group_by(county, year(full_date)) %>%
summarise(total_diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE)) %>%
ungroup()
# Pivot the data to have years as columns and the total number of diarrhea cases as values
diarrhea_pivot <- diarrhea_counts %>%
pivot_wider(names_from = year(full_date), values_from = total_diarrhea_cases)
# removing county from county name entries
data$county <- gsub(" County", "", data$county)
# Convert the period date to a 28 day full date format
data$full_date <- dmy(paste0("28-", data$period))
# Display the updated data with the new "full_date" column
view(data)
filtered_data <- data %>%
filter(year(full_date) %in% c(2021, 2022, 2023))
# Group data by county and year, and calculate the total number of diarrhea cases
diarrhea_counts <- filtered_data %>%
group_by(county, year(full_date)) %>%
summarise(total_diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE)) %>%
ungroup()
# Pivot the data to have years as columns and the total number of diarrhea cases as values
diarrhea_pivot <- diarrhea_counts %>%
pivot_wider(names_from = year(full_date), values_from = total_diarrhea_cases)
# Convert the 'period' column to a full date format 'Jan-23' to '2023-01-01'
data$full_date <- as.Date(paste0("01-", data$period), format = "%d-%b-%y")
# Filter data for years 2021, 2022, and 2023
filtered_data <- data %>%
filter(year(full_date) %in% c(2021, 2022, 2023))
# Group data by county and year, and calculate the total number of diarrhea cases
diarrhea_counts <- filtered_data %>%
group_by(county, year(full_date)) %>%
summarise(total_diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE)) %>%
ungroup()
# Pivot the data to have years as columns and the total number of diarrhea cases as values
diarrhea_pivot <- diarrhea_counts %>%
pivot_wider(names_from = year(full_date), values_from = total_diarrhea_cases)
# Filter data for years 2021, 2022, and 2023
filtered_data <- data %>%
filter(year(full_date) %in% c(2021, 2022, 2023))
# Group data by county and year, and calculate the total number of diarrhea cases
diarrhea_counts <- filtered_data %>%
group_by(county, year(full_date)) %>%
summarise(total_diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE)) %>%
ungroup()
# Pivot the data to have years as columns and the total number of diarrhea cases as values
diarrhea_pivot <- diarrhea_counts %>%
pivot_wider(names_from = year(full_date), values_from = total_diarrhea_cases)
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = diarrhea_cases, color = "Diarrhea Cases"), linewidth = 1.5 ,color="red") +
labs(title = "Diarrhea Cases Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = total_dewormed), linewidth = 1.5, show.legend = FALSE, color="blue") +
labs(title = "Total Dewormed Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
cat("\014")
knitr::opts_chunk$set(echo = TRUE)
# Importing required libraries
library(tidyverse)
library(lubridate)
library(dplyr)
library(rgdal)
library(ggplot2)
library(sf)
library(foreign)
library(leaflet)
data <- read_csv("data/cema_internship_task_2023.csv")
# Viewing the top 5 dataset values
head(data)
# Checking for missing values and other descriptive statistics
summary(data)
# Checking the percentage of missing values(NA)
calculate_missing_percentage <- function(data) {
missing_percentage <- colMeans(is.na(data)) * 100
return(missing_percentage)
}
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# Replacing all NA's with 0
data <- data %>%
mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
# checking if the NA's have been replaced with 0
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# removing county from county name entries
data$county <- gsub(" County", "", data$county)
# Convert the period date to a 28 day full date format
data$full_date <- dmy(paste0("28-", data$period))
# Display the updated data with the new "full_date" column
view(data)
line_data <- data %>%
group_by(period) %>%
summarise(
total_dewormed = sum(`Total Dewormed`, na.rm = TRUE),
diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE))
line_data <- line_data %>%
mutate(period = str_c(period, "-01")) %>%
separate(period, into = c("month", "year", "day"), sep = "-", remove = FALSE) %>%
mutate(month_number = as.character(match(month, month.abb)),
year = str_replace(year, "^", "20")) %>%
mutate(date = make_date(year, month_number, day)) %>%
select(date, total_dewormed, diarrhea_cases) %>%
arrange(date)
line_data %>% head()
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = total_dewormed), linewidth = 1.5, show.legend = FALSE, color="blue") +
labs(title = "Total Dewormed Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = diarrhea_cases, color = "Diarrhea Cases"), linewidth = 1.5 ,color="red") +
labs(title = "Diarrhea Cases Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
# Importing required libraries
library(tidyverse)
library(lubridate)
library(dplyr)
library(rgdal)
library(ggplot2)
library(sf)
library(foreign)
library(leaflet)
data <- read_csv("data/cema_internship_task_2023.csv")
# Viewing the top 5 dataset values
head(data)
# Checking for missing values and other descriptive statistics
summary(data)
# Checking the percentage of missing values(NA)
calculate_missing_percentage <- function(data) {
missing_percentage <- colMeans(is.na(data)) * 100
return(missing_percentage)
}
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# Replacing all NA's with 0
data <- data %>%
mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
# checking if the NA's have been replaced with 0
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# removing county from county name entries
data$county <- gsub(" County", "", data$county)
# Convert the period date to a 28 day full date format
data$full_date <- dmy(paste0("28-", data$period))
# Display the updated data with the new "full_date" column
view(data)
line_data <- data %>%
group_by(period) %>%
summarise(
total_dewormed = sum(`Total Dewormed`, na.rm = TRUE),
diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE)) %>%
mutate(period = str_c(period, "-01")) %>%
separate(period, into = c("month", "year", "day"), sep = "-", remove = FALSE) %>%
mutate(month_number = as.character(match(month, month.abb)),
year = str_replace(year, "^", "20")) %>%
mutate(date = make_date(year, month_number, day)) %>%
select(date, total_dewormed, diarrhea_cases) %>%
arrange(date)
line_data %>% head()
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = total_dewormed), linewidth = 1.5, show.legend = FALSE, color="blue") +
labs(title = "Total Dewormed Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = diarrhea_cases, color = "Diarrhea Cases"), linewidth = 1.5 ,color="red") +
labs(title = "Diarrhea Cases Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Importing required libraries
library(tidyverse)
library(lubridate)
library(dplyr)
library(rgdal)
library(ggplot2)
library(sf)
library(foreign)
library(leaflet)
data <- read_csv("data/cema_internship_task_2023.csv")
# Viewing the top 5 dataset values
head(data)
# Checking for missing values and other descriptive statistics
summary(data)
# Checking the percentage of missing values(NA)
calculate_missing_percentage <- function(data) {
missing_percentage <- colMeans(is.na(data)) * 100
return(missing_percentage)
}
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# Replacing all NA's with 0
data <- data %>%
mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
# checking if the NA's have been replaced with 0
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# removing county from county name entries
data$county <- gsub(" County", "", data$county)
# Convert the period date to a 28 day full date format
data$full_date <- dmy(paste0("28-", data$period))
# Display the updated data with the new "full_date" column
view(data)
line_data <- data %>%
group_by(period) %>%
summarise(
total_dewormed = sum(`Total Dewormed`, na.rm = TRUE),
diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE)) %>%
mutate(period = str_c(period, "-01")) %>%
separate(period, into = c("month", "year", "day"), sep = "-", remove = FALSE) %>%
mutate(month_number = as.character(match(month, month.abb)),
year = str_replace(year, "^", "20")) %>%
mutate(date = make_date(year, month_number, day)) %>%
select(date, total_dewormed, diarrhea_cases) %>%
arrange(date)
line_data %>% head()
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = total_dewormed), linewidth = 1.5, show.legend = FALSE, color="blue") +
labs(title = "Total Dewormed Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = diarrhea_cases, color = "Diarrhea Cases"), linewidth = 1.5 ,color="red") +
labs(title = "Diarrhea Cases Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
install.packages("corrplot")
library(corrplot)
# Importing required libraries
library(tidyverse)
library(lubridate)
library(dplyr)
library(rgdal)
library(ggplot2)
library(sf)
library(foreign)
library(leaflet)
library(corrplot)
# Importing required libraries
library(tidyverse)
library(lubridate)
library(dplyr)
library(rgdal)
library(ggplot2)
library(sf)
library(foreign)
library(leaflet)
library(corrplot)
data <- read_csv("data/cema_internship_task_2023.csv")
# Viewing the top 5 dataset values
head(data)
# Checking for missing values and other descriptive statistics
summary(data)
# Checking the percentage of missing values(NA)
calculate_missing_percentage <- function(data) {
missing_percentage <- colMeans(is.na(data)) * 100
return(missing_percentage)
}
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# Replacing all NA's with 0
data <- data %>%
mutate(across(everything(), ~ifelse(is.na(.), 0, .)))
# checking if the NA's have been replaced with 0
missing_percentages <- calculate_missing_percentage(data)
print(missing_percentages)
# removing county from county name entries
data$county <- gsub(" County", "", data$county)
# Convert the period date to a 28 day full date format
data$full_date <- dmy(paste0("28-", data$period))
# Display the updated data with the new "full_date" column
view(data)
line_data <- data %>%
group_by(period) %>%
summarise(
total_dewormed = sum(`Total Dewormed`, na.rm = TRUE),
diarrhea_cases = sum(`diarrhoea cases`, na.rm = TRUE)) %>%
mutate(period = str_c(period, "-01")) %>%
separate(period, into = c("month", "year", "day"), sep = "-", remove = FALSE) %>%
mutate(month_number = as.character(match(month, month.abb)),
year = str_replace(year, "^", "20")) %>%
mutate(date = make_date(year, month_number, day)) %>%
select(date, total_dewormed, diarrhea_cases) %>%
arrange(date)
line_data %>% head()
ggplot(line_data, aes(x = date)) +
geom_line(aes(y = diarrhea_cases, color = "Diarrhea Cases"), linewidth = 1.5 ,color="red") +
labs(title = "Diarrhea Cases Over Time",
x = "Date",
y = "Count") +
scale_x_date(date_labels = "%b-%y", date_breaks = "1 month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
install_tinytex()
install.packages("tinytex")
library(tinytex)
tinytex::install_tinytex()
